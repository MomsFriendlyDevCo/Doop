<server on="middleware, dbMiddleware">
var _ = require('lodash');

/**
* Database middleware to add a meta 'db.MODEL.search()' method onto a model
*
* Search works by attaching to save / update / create hooks and populating an array of searchable tokens per document
* Searching then performs a RegExp against this (now flattened) array of items, calculating weight for each document
*
* @param {Object} options Options to pass when initalizing
* @param {string} [options.path="_searchTokens"] Dotted notation path of where to store search meta information in each doc
* @param {Object} [options.docFilter] Additional filter to apply to all `.search()` calls on the database
* @param {function} [options.docSoftFilter] Additonal Monoxide filter to apply to all documents on each '.search()' call. Called as `(next, doc)`
* @param {string} [options.select] Optional CSV of fields to limit by
* @param {array<Object>} [options.fields] Field definition for each item that should be indexed
* @param {string} [options.fields.name] Optional reference name for the field, useful when debugging
* @param {string} [options.fields.path] Dotted notation path from where the value should be fetch if its a simple non-lookup value, can use either this or `option.fields.handler`
* @param {function} [options.fields.handler] Function called as `(doc)` which is expected to return a single string to index, can use either this or `option.fields.path`
* @param {number} [options.fields.weight=1] Weighting during search
* @returns {function} Database middleware
*
* @example Attach search functionality to a model
*   app.middleware.db.schema('users', { ... })
*     .use(app.middleware.db.search, {
*       fields: [
*         {path: 'lastName', weight: 10},
*         {path: 'firstName', weight: 5},
*         {name: 'ageInYears', weight: 1, handler: doc => { // NOTE: Would only calculate on save, not on each run
*           var ageDifMs = Date.now() - doc.dob.getTime(); // Assumes DoB field
*           var ageDate = new Date(ageDifMs);
*           return Math.abs(ageDate.getUTCFullYear() - 1970);
*         },
*       ],
*     }))
*
* @example Fuzzy search the model returning matches as a weighted list
*   db.users.search('smith 20')
*     .then(users => {...}) // Users are sorted by the meta `_score` field, each document also returns with a `_score` field
*/
app.middleware.db.search = (model, options) => {
	// Settings {{{
	var settings = {
		path: '_searchTokens',
		fields: [
			// Use static path
			// {path: 'lastName', weight: 10},

			// Use (sync/async) handler function, can be a promise return
			// {name: 'ref', weight: 20, handler() {...}}
		],
		mutateTokens: v => _.chain(v)
			.toString()
			.thru(v => v.toUpperCase())
			.deburr()
			.replace(/[^A-Z0-9\-]+/g, ' ')
			.trim()
			.value(),
		searchTermsSplit: v => _.chain(v)
			.toString()
			.thru(v => v.toUpperCase())
			.deburr()
			.split(/[^A-Z0-9\-]/)
			.value(),
		docFilter: undefined,
		docSoftFilter: (next, doc) => next(null, true),
		select: undefined,
		...options,
	};
	// }}}

	// Create index for the field we will be tokenizing into {{{
	model.index(`${settings.path}.value`);
	// }}}

	// Apply create / save / update hooks to documents to calculate the token storage {{{
	var applyTokens = function(done, doc) {
		Promise.all(settings.fields.map((field, fieldIndex) =>
			field.path ? Promise.resolve({value: _.get(doc, field.path), weight: field.weight || 1}) // Static path
			: field.handler ? Promise.resolve(field.handler(doc))
				.then(value => ({value, weight: field.weight || 1}))
			: Promise.reject(`Unknown search handler on field #${field.name || fieldIndex} for model ${model.$collection} - specify "path" or "handler" at least`)
		))
			.then(tokens => tokens.map(token => ({...token, value: settings.mutateTokens(token.value)}))) // Mutate tokens
			.then(tokens => tokens.filter(token => token.value)) // Remove falsy tokens
			.then(tokens => _.set(doc, settings.path, tokens))
			.then(()=> done())
	};

	model.hook('create', applyTokens);
	model.hook('save', applyTokens);
	model.hook('update', applyTokens);
	// }}}

	// Add the model.search() method {{{
	/**
	* Fuzzy search using the declared search fields
	* @param {string} terms Search terms to filter
	* @param {Object} [options] Additional options
	* @param {Object} [options.filter] Additional Mongo compatible expression to filter on the database
	* @param {boolean} [options.sort="_score"] Sort results by field automatically
	* @param {function} [options.softFilter] Addtional "soft" filter to apply, added after the main settings.docFilter, called as `(next, doc)`
	* @param {function} [options.limit=100] How many records to "soft" limit by
	* @param {function} [options.skip=0] How many records to "soft" skip by
	* @param {string} [options.select] Optional CSV of fields to limit by, overrides settings.select if present
	* @param {boolean} [options.count=false] Return an object with the count of objects rather than those that match
	* @returns {array<Object>} An array of matching documents with the meta `_score` field
	*/
	model.search = function(terms, options) {
		var searchSettings = {
			filter: undefined,
			softFilter: (next, doc) => next(null, true),
			sort: '_score',
			limit: 50,
			skip: 0,
			select: undefined,
			count: false,
			...options,
		};

		app.log(`Performing ${!searchSettings.count ? 'search' : 'search-count'} on`, app.log.colors.cyan(model.$collection), 'collection query=', app.log.colors.cyan(`"${terms}"`));

		var termsRE = settings.searchTermsSplit(terms).map(term => new RegExp(RegExp.escape(term), 'i')) // Compose an array of search terms as RegExps

		return new Promise((resolve, reject) => model.find(_.chain(termsRE)
				.map(termRE => ({
					[`${settings.path}.value`]: termRE,
				}))
				.thru(v => ({$or: v})) // Wrap multiple field checks in $or
				.value()
			)
			.find(settings.filter)
			.find(searchSettings.filter)
			.select(
				settings.count ? '_id' // Only pick the _id if we're in count mode to save memory
				: settings.select ? settings.select.split(',') // Otherwise assume settings.select is a CSV
				: searchSettings.select.split(',') // or fall back to main search setting
			)
			.filter(settings.docSoftFilter)
			.filter(searchSettings.softFilter)
			.map((next, doc) =>
				!searchSettings.count ? next(null, doc) // We dont need to do any document mangling for count operations
				: Promise.all(settings.fields.map((field, fieldIndex) =>
					Promise.resolve(
						field.path ? _.get(doc, field.path)
						: field.handler ? field.handler(doc)
						: Promise.reject(`Unknown search handler on field #${field.name || fieldIndex} for model ${model.$collection} - specify "path" or "handler" at least`)
					)
						.then(fieldVal => fieldVal && termsRE.some(re => re.test(fieldVal)) ? field.weight : 0)
				))
					.then(fieldScores => doc._score = fieldScores.reduce((t, v) => t + v, 0))
					.then(()=> next(null, doc))
			)
			.thru((next, docs) => next(null, !searchSettings.count && searchSettings.sort ? _.sortBy(docs, searchSettings.sort) : docs)) // Sort by score
			.thru((next, docs) => next(null, !searchSettings.count && (searchSettings.skip || searchSettings.limit) ? docs.slice(searchSettings.skip, searchSettings.skip + searchSettings.limit) : docs))
			.exec((err, items) => {
				if (err) {
					reject(err);
				} else if (searchSettings.count) {
					resolve(items.length);
				} else {
					resolve(items);
				}
			})
		);
	};
	// }}}
};
</server>
