<server on="middleware">
/**
* Provides a middleware cache for routes
* @param {string} [time] @momsfriendlydevco/express-middleware-cache compatible time string
* @param {Object} [options] Additional options to pass to the caching middleware
* @param {string|array} [options.tag] Tag or tags to mark a middleware hook as - invalidate with cache.invalidate(tags
* @see https://github.com/MomsFriendlyDevCo/express-middleware-cache
*
* @example Cache an endpoint for 3 hours
* app.get('/endpoint', app.middleware.express.cache('3h'))
* @example Cache something with a tag for 2 minutes
* app.get('/endpoint', app.middleware.express.cache('2h', {tag: 'someTag'}))
* @example Invalidate a the above tag
* app.middleware.express.cache.invalidate('someTag')
* @example Store a value
* app.middleware.express.cache.set('someKey', cb)
* @example Retrieve a value
* app.middleware.express.cache.get('someKey', cb)
*/

var logger = require('express-log-url');
var middlewareCache = require('@momsfriendlydevco/express-middleware-cache');
var promisify = require('util').promisify;

exports = ()=>
	Promise.resolve()
		.then(()=> require('.')())
		.then(()=> { // Register against event hooks
			app.cache
				.on('routeCacheHashError', (err, req) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Cache Error + ${err.toString()}`}))
				.on('routeCacheEtag', (req, info) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Validated against existing etag hash ${info.hash}`}))
				.on('routeCacheExisting', (req, info) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Cached using existing hash ${info.hash}`}))
				.on('routeCacheFresh', (req, info) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Cache generate new hash ${info.hash}`}))
				.on('routeCacheInvalidate', (tag, hash) => console.log(colors.grey(`Invalidate cache tag '${tag}' (hash ${hash})`)));
		})
		.then(()=> { // Load app.middleware.express.cache
			app.middleware.express.cache = middlewareCache;
			return promisify(app.middleware.express.cache.setup)(app.config.cache);
		})
		.then(()=> app.on('exit', ()=> app.cache.destroy()))

</server>
