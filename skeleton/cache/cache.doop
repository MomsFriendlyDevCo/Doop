<server on="middleware">
/**
* Provides a middleware cache for routes
* @param {string} [time] @momsfriendlydevco/express-middleware-cache compatible time string
* @param {Object} [options] Additional options to pass to the caching middleware
* @param {string|array} [options.tag] Tag or tags to mark a middleware hook as - invalidate with cache.invalidate(tags
* @see https://github.com/MomsFriendlyDevCo/express-middleware-cache
*
* @example Cache an endpoint for 3 hours
* app.get('/endpoint', app.middleware.express.cache('3h'))
* @example Cache something with a tag for 2 minutes
* app.get('/endpoint', app.middleware.express.cache('2h', {tag: 'someTag'}))
* @example Invalidate a the above tag
* app.middleware.express.cache.invalidate('someTag')
* @example Store a value
* app.middleware.express.cache.set('someKey', cb)
* @example Retrieve a value
* app.middleware.express.cache.get('someKey', cb)
*/

var logger = require('express-log-url');
var middlewareCache = require('@momsfriendlydevco/express-middleware-cache');
var promisify = require('util').promisify;

exports = ()=>
	Promise.resolve()
		.then(()=> require('.')())
		.then(()=> { // Register against event hooks
			app.cache
				.on('routeCacheHashError', (err, req) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Cache Error + ${err.toString()}`}))
				.on('routeCacheEtag', (req, info) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Validated against existing etag hash ${info.hash}`}))
				.on('routeCacheExisting', (req, info) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Cached using existing hash ${info.hash}`}))
				.on('routeCacheFresh', (req, info) => logger.log({method: req.method, code: 'CSH', path: req.path, info: `Cache generate new hash ${info.hash}`}))
				.on('routeCacheInvalidate', (tag, hash) => console.log(colors.grey(`Invalidate cache tag '${tag}' (hash ${hash})`)));
		})
		.then(()=> { // Load app.middleware.express.cache
			app.middleware.express.cache = middlewareCache;
			return promisify(app.middleware.express.cache.setup)(app.config.cache);
		})
		.then(()=> app.on('exit', ()=> app.cache.destroy()))

</server>

<server on="middleware">
var _ = require('lodash');

/**
* Simple wrapper middleware function which either returns the cached ID (via app.cache) or runs a worker to calculate + cache a new one
* NOTE: Since Promise execute immediately the worker must be a promise factory
* @param {string|Object} options Options to use when caching, if this is a non-object its assumed to be the value of `options.id`
* @param {string} options.id The ID of the cache to use
* @param {boolean} [options.enabled=true] Whether to use the cache at all, set to false to debug the function worker each time
* @param {string} [options.expiry="1h"] Any timesting valid entry to determine the maximum cache time
* @param {boolean} [options.rejectAs=undefined] Cache throwing promises as this value rather than repeating them each hit
* @param {number} [options.retry=0] If a promise rejects retry it this many times before giving up
* @param {number|function} [options.retryDelay=100] Delay between promise retries, if a function is called as `(attempt, settings)` and expected to return the delay amount
* @param {function} [options.onRetry] Sync function to call as `(error, attempt)` when a retryable operation fails, if any non-undefined is returned the retry cycle is aborted and the value used as the promise resolve value, if the function throws the entire promise retry cycle is exited with the thrown error as the rejection
* @param {*} [options.invalidStore] Value use to detect the absence of a value in the cache (so we can detect null/undefined values even though they are falsy)
* @param {function} worker The worker PROMISE FACTORY function to execute if the cache value does not exist, the result of this is used for the subsequent cache value
* @returns {Promise<*>} A promise which will return with the result of worker - or the cached value of worker until it expires
*
* @example Return the cached response, otherwise compute it
* app.cache.function({id: 'myFunc'}, ()=> someBigPromise()).then(result => ...)
*/
app.cache.function = (options, worker) => {
	var settings = {
		id: !_.isPlainObject(options) ? options : undefined,
		enabled: true,
		expiry: '1h',
		// rejectAs: undefined, // If set we use rejectAs, otherwise leave unset so we can also detect `undefined` value
		retry: 0,
		retryDelay: 100,
		onRetry: e => console.warn(e),
		invalidStore: '!!!UNKNOWN!!!',
		...options,
	};
	if (!settings.id) throw new Error('No ID specified for app.cache.function(id, worker)');
	if (worker instanceof Promise) throw new Error('app.cache.function must be passed a PROMISE FACTORY not an already executing PROMISE');
	if (!_.isFunction(worker)) throw new Error('app.cache.function worker must be a function');

	// Bypass cache entirely when disabled
	if (!settings.enabled) return Promise.resolve(worker());

	return app.cache.get(settings.id, settings.invalidStore)
		.then(res => new Promise((resolve, reject) => {
			var attempt = 0; // What attempt we are at now, increments for each `retry`
			if (res !== settings.invalidStore) return resolve(res); // Result found

			var tryResolve = ()=> { // Create repeatable promise factory function (so we can retry on fail)
				app.log('Cache function refresh for', app.log.colors.cyan(settings.id));
				Promise.resolve(worker()) // Execute worker as promisable
					.then(value => app.cache.set(settings.id, value, settings.expiry).then(()=> value)) // Cache output result and return
					.then(value => resolve(value))
					.catch(e => {
						if (settings.hasOwnProperty('rejectAs')) {
							app.log.warn('Cache func function refresh for', settings.id, 'threw', 'using fallback', settings.rejectAs);
							return app.cache.set(settings.id, settings.rejectAs).then(()=> rejectAs);
						} else if (settings.hasOwnProperty('retry') && settings.hasOwnProperty('retry') > 0) {
							if (++attempt > settings.retry) { // Exhausted retry limit - reject
								reject(e);
							} else {
								app.log.warn('Cache func function refresh for', settings.id, `threw on attempt ${attempt}`);
								try {
									var retryValue = settings.onRetry(e, attempt);
									if (retryValue !== undefined) return resolve(retryValue); // Did onRetry give us a value to use instead?
									var useDelay = _.isFunction(settings.retryDelay) ? settings.retryDelay(attempt, settings) : settings.retryDelay;
									if (!isFinite(useDelay)) return reject('Got non-numeric delay for retryDelay');
									setTimeout(tryResolve, useDelay);
								} catch (e) {
									app.log.warn('Cache func function refresh for', settings.id, `threw on attempt ${attempt}, rejecting with`, e.toString());
									return reject(e);
								}
							}
						} else {
							app.log.warn('Cache func function refresh for', settings.id, 'threw', e.toString());
							reject(e);
						}
					})
			};

			tryResolve();
		}))
};
</server>
