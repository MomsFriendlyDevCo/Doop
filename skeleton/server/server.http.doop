<script lang="js" backend on="init">
/**
* Create dummy Express(like) methods which queue up endpoints
* These get processed in a later hook which turns them into real Express endpoints on `app`
* This is so that route paths can be 'sane' sorted similar to the front end (i.e. '/api/widgets/create' sorts before '/api/widgets/:id')
*/
var _ = require('lodash');

/**
* Storage for future endpoints, deleted when processed
* All calls to app.get() etc. are created as elements in this list so they can be sorted after the main express loader has finished
* @type {array<Object>}
* @property {string} method The HTTP method to wrap (also 'set')
* @property {string} path The path to setup the endpoint on
* @property {*} [...args] Additional Express compatible behaviour to queue up
*/
app.endpoints = [];

['all', 'delete', 'get', 'options', 'patch', 'post', 'set', 'use'].forEach(method =>
	app[method] = (path, ...args) => {
		if (!app.config.isProduction && app.endpoints.some(e => e.method == method && e.path == path)) app.log.warn('Duplicate endpoint registered -', app.log.colors.blue(`app.${method}('${path}')`));
		app.endpoints.push({method, path, args})
	}
);
</script>

<script lang="js" backend on="server">
/**
* Initalize core server
*/
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var compression = require('compression');
var cors = require('cors');
var crash = require('@momsfriendlydevco/crash');
var historyFallback = require('connect-history-api-fallback-exclusions');
var helmet = require('helmet');
var express = require('express');

app.emit('preExpress');
app.express = express();
app.emit('postExpress');


// NOTE: We're using app.express rather than app.use as we want the raw express hook rather than our custom wrapped one
app.express.use(helmet());
app.express.use(cors());
app.express.use(historyFallback({ // Route all HTTP elements to '/' to support non-hashbang mode
	index: '/',
	exclusions: ['/api/*', '/dist/*', '/go/*', '/generated/*'],
}));
app.express.use(cookieParser());
app.express.use(bodyParser.json({limit: '64mb'}));
app.express.use(bodyParser.urlencoded({limit: '16mb', extended: false}));
app.express.use(compression());

// Extend the Res object so it contains the new res.sendError() reporting function
app.express.use(function(req, res, next) {

	/**
	* Report an error
	* This is really just a convenience function to set all the weird headers in the event of an error
	* If err is a string with the prefix `xxx:Text` the first part is used as the return code with the second as the error message
	* @param {number} [code=400] Optional error code to use
	* @param {string} err The error to report
	* @return {undefined} This function is fatal to express as it closes the outbound connection when it completes
	*
	* @example Throw error 404
	* res.sendError(404)
	*
	* @example Throw general error with 400
	* res.sendError('This is an error')
	*
	* @example Throw error 512 with custom text within one string
	* res.sendError('512: This is a custom error')
	*/
	res.sendError = function(code, err) {
		if (!isFinite(code)) [code, err] = [400, code.toString()];

		// Process optional string prefix (if we're using the default error fallback)
		if (code == 400) {
			var errBits = /^(\d+)+\s*:\s*(.*)$/.exec(err);
			if (errBits) [, code, err] = errBits;
		}

		res.errorBody = err;
		if (!res.headersSent) {
			res.status(code).send(res.errorBody);
		} else {
			app.log.warn('Cannot send error when headers have already been sent');
		}

		crash.trace(err, {prefix: 'Caught server error'});
	};

	next();
});
</script>

<script lang="js" backend on="server">
/**
* Explode all endpoints in app.endpoints into actual Express endpoints
*/
var _ = require('lodash');
_(app.endpoints)
	.sortBy(endpoint => {
		var sortPath = // Decide primary path element to sort by
			_.isString(endpoint.path) ? endpoint.path // Strings: Use simple string if there is only one route
			: _.isArray(endpoint.path) ? _.first(endpoint.path) // Arrays: Use first element if its an array
			: _.isRegExp(endpoint.path) ? endpoint.path.toString().replace(/\/\//g, '/') // RegExp: try to tidy up path components at least
			: null; // Use null - should sort to high priority

		return _.isString(sortPath) // Translate "/" + ":" into low ranking sort characters
			? sortPath
				.replace(/\//g, String.fromCharCode(824))
				.replace(/:/g, String.fromCharCode(818))
				.replace(/\?/g, String.fromCharCode(825))
			: '';
	})
	.forEach(endpoint => {
		app.express[endpoint.method](...[
			endpoint.path,
			...endpoint.args,
		].filter(i => i));
	});

delete app.endpoints; // Prevent usage of endpoints now its been processed

// Replace all app methods with warnings
['all', 'delete', 'get', 'options', 'patch', 'post', 'set', 'use'].forEach(method =>
	app[method] = path => app.log.warn('Attemping to set up express path at', app.log.colors.cyan(path), 'after server hook has fired - request rejected')
);
</script>

<script lang="js" backend on="server">
var fs = require('fs');
var http = require('http');
var https = require('https');
var express = require('express');
var url = require('url');

return new Promise(resolve => {
	if (app.config.ssl.enabled && !fs.existsSync(app.config.ssl.cert)) {
		app.log.warn('SSL enabled but cert file is missing, assuming', app.log.colors.yellow('production simulation mode'), 'without SSL');
		app.config.ssl.enabled = false;
		app.config.url = 'http://localhost';
		app.config.host = 'localhost';
	}

	if (app.config.ssl.enabled) { // SSL enabled
		if (app.config.ssl.redirect) { // If SSL enabled + redirect enabled, create basic server to redirect to HTTPS server
			app.log.debug('server.http - use HTTP server w/ redirect to HTTPS');
			var redirectApp = express();
			redirectApp.get('/*', function(req, res) {
				res.redirect('https://' + url.parse(app.config.url).hostname + req.url); // Force HTTPS protocol, irrespective of specified protocol in app.config.url
			});
			app.serverHttp = http.createServer(redirectApp).listen(80);
			app.serverHttp.timeout = app.config.timeout;
		}

		// Create HTTPS server
		app.log.debug('server.https - create HTTPS server');
		app.server = https.createServer({
			cert: fs.readFileSync(app.config.ssl.cert),
			key: fs.readFileSync(app.config.ssl.key),
		}, app.express).listen(443, resolve);
		app.server.timeout = app.config.timeout;
	} else {
		app.log.debug('server.http - use basic HTTP server only');
		app.server = app.express.listen(app.config.port, app.config.host, resolve);
		app.server.timeout = app.config.timeout;
	}
});
</script>

<script lang="js" backend on="ready">
app.log('Web interface listening at', app.log.colors.cyan(app.config.url));
</script>
