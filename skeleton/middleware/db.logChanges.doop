<script lang="js" backend on="middleware, dbMiddleware">
var _ = require('lodash');

/**
* Mongo Document versioning middleware
* This middleware intercepts all save calls and writes the delta to a nominated collection as a streaming log
*
* @param {MongoosySchema} schema Attach to this schema
* @param {Object} [options] Options structure to use
* @param {function} [options.action] Promisable function to call as `(model, doc, changes, settings)` when changes occur, if omitted the default beahaviour is to insert changes into `options.logTable`
* @param {string} [options.logTable='logs'] Collection to append to if `options.action` isn't specified
* @param {string} [options.logFieldDate='created'] Field to recieve the changing date object
* @param {string} [options.logFieldCollection='col'] Field to recieve the changing collection
* @param {string} [options.logFieldId='doc'] Field to recieve the changing document ID
* @param {string} [options.logFieldChanges='body'] Field to recieve the change object (each key in dotted notation)
*
* @example Monitor a collection using defaults
* db.widgets.use(app.db.middleware.db.versioning)
*
* @example Monitor a collection overriding the destination
* db.widgets.use(app.db.middleware.db.versioning, {
*   logTable: 'versioning',
*   logFieldDate: 'date',
*   logFieldCollection: 'col',
*   logFieldId: 'docId',
*   logFieldChanges: 'changes',
* })
*/

app.middleware.db.logChanges = (schema, options) => {
	var settings = {
		action: (doc, changes, settings) => app.db[settings.logTable].create({
			[settings.logFieldDate]: new Date(),
			[settings.logFieldCollection]: schema.id,
			[settings.logFieldId]: doc._id,
			[settings.logFieldChanges]: changes,
		}),
		logTable: 'logs',
		logFieldDate: 'created',
		logFieldChanges: 'body',
		logFieldCollection: 'col',
		logFieldId: 'doc',
		...options,
	};

	var hookFactory = function(path) {
		return function(next) {
			if (schema.id === settings.logFieldCollection) return next();
			//if (!app.db[schema.id]) return next();
			var doc = (path && Object.prototype.hasOwnProperty.call(this, path)) ? this[path] : this;

			// FIXME: This isn't a MongooseDocument but instead simply the REST raw object?
			var changes = _.mapValues(doc.isModified(), k => _.get(doc, k)); // Compute dotted-notation object for changes
			app.log('changes', changes);

			return Promise.resolve();
			return Promise.resolve(settings.action(doc, changes, settings))
				.then(()=> next())
				.catch(next);
		};
	};

	schema.pre(['save', 'update', 'updateOne', 'updateMany'], hookFactory());
	schema.pre('findOneAndUpdate', hookFactory('_update'));
};
</script>
