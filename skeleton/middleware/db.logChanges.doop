<server on="middleware, dbMiddleware">
var _ = require('lodash');

/**
* Mongo Document versioning middleware
* This middleware intercepts all save calls and writes the delta to a nominated collection as a streaming log
*
* @param {MonoxideModel} model The monoxide model to attach to
* @param {Object} [options] Options structure to use
* @param {function} [options.action] Promisable function to call as `(model, doc, changes, settings)` when changes occur, if omitted the default beahaviour is to insert changes into `options.logTable`
* @param {string} [options.logTable='logs'] Collection to append to if `options.action` isn't specified
* @param {string} [options.logFieldDate='created'] Field to recieve the changing date object
* @param {string} [options.logFieldCollection='col'] Field to recieve the changing collection
* @param {string} [options.logFieldId='doc'] Field to recieve the changing document ID
* @param {string} [options.logFieldChanges='body'] Field to recieve the change object (each key in dotted notation)
*
* @example Monitor a collection using defaults
* db.widgets.use(app.db.middleware.db.versioning)
*
* @example Monitor a collection overriding the destination
* db.widgets.use(app.db.middleware.db.versioning, {
*   logTable: 'versioning',
*   logFieldDate: 'date',
*   logFieldCollection: 'col',
*   logFieldId: 'docId',
*   logFieldChanges: 'changes',
* })
*/

app.middleware.db.logChanges = (model, options) => {
	var settings = {
		action: (model, doc, changes, settings) => db[settings.logTable].insertOne({
			[settings.logFieldDate]: new Date(),
			[settings.logFieldCollection]: model.$collection,
			[settings.logFieldId]: doc._id,
			[settings.logFieldChanges]: changes,
		}),
		logTable: 'logs',
		logFieldDate: 'created',
		logFieldChanges: 'body',
		logFieldCollection: 'col',
		logFieldId: 'doc',
		...options,
	};

	model.hook('save', (query, next, doc) => {
		var changes = _.mapValues(doc.isModified(), k => _.get(doc, k)); // Compute dotted-notation object for changes

		return Promise.resolve(settings.action(model, doc, changes, settings))
			.then(()=> next())
			.catch(next)
	});
};
</server>
