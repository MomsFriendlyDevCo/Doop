<server on="middleware, dbMiddleware">
var _ = require('lodash');
var handlebars = require('handlebars');
var mongoosy = require('@momsfriendlydevco/mongoosy');

/**
* Attempt to generate a short code for a document when saving
* This function accepts a handlebars template and checks for collisions within an existing MongoDB collection
* If a collision is found the '{{unique}}' part of the pattern is incremented until the output no longer collides
*
* @param {MonoxideModel} model The mongoosy model to attach to
* @param {Object} [options] Options structure to use
* @param {string|function} [options.template="{{unique}}"] The handlebars template to use when generating the code, if this is a function it is executed as (doc) and may return a promise
* @param {boolean} [options.allocateUndefined=true] Whether to process undefined values when creating a record
* @param {boolean|function} [options.shouldAllocate=true] Optional function to use when deciding if a code should be allocated, promises is expected to resolve to boolean true / false. Called as (doc, settings)
* @param {function} [options.shouldAllocateInit] Optional function QUICKLY check if a document needs an ID, note that unlike `shouldAllocate` this is not guaranteed to have the full document and must return syncronously. Called as (rawDoc, settings)
* @param {Object|function} [options.templateData={}] Data to include when compiling the handlebars template, if this is a function it is executed as (doc) and may return a promise
* @param {string} [options.field=code] The filed to use when searching
* @param {number} [options.uniqueStart=1] The value to assume '{{unique}}' should default to when no other records exist
* @param {number} [options.uniqueIncrement=1] Value to increment by if '{{unique}}' hits a collision
* @param {number} [options.uniquePadding=4] Pad the unique value to this length
* @param {number} [options.uniqueChar='0'] Pad the unique value with this string
* @param {string} [options.uniqueRE="([0-9]+?)"] RegExp used to match the '{{unique}}' field
* @param {function} [options.uniqueIncrementor] Function to use when applying an increment. Function called with (value, incrementor)
* @param {string} [options.uniqueToken='!!!UNIQUE!!!'] Token to pass around when computing the unique value. This must not be a string that can occur in the template
* @param {string} [options.existing] The existing code owned by the upstream object, this is usually an already allocated code for a record that is being saved. If nothing else has changed (via templateData) it will be returned unaltered, if it HAS it will be given the next available slot
* @param {Object} [options.doc] The input document used when `excludeSelf == true`
* @returns {MonoxideModel} The chainable original MonoxideModel object
*
* @example Set the code field on the collection 'widgets' to be a unique code based on a template
* app.db.widgets.use(app.middleware.db.codeAlloc({
*   collection: 'widgets',
*   field: 'code',
*   template: '{{config.theme.code}}-QA-{{unique}}',
*   templateData: doc => ({config: app.config, worklot: doc}),
* }))
*/
app.middleware.db.codeAlloc = (model, options) => {
	var settings = {
		field: 'code',
		template: '{{unique}}',
		templateData: {},
		allocateCreate: true,
		allocateSave: true,
		allocateUpdate: true,
		allocateUndefined: true,
		uniqueStart: 1,
		uniqueIncrement: 1,
		uniquePadding: 4,
		uniquePaddingChar: '0',
		uniqueRE: '([0-9]+?)',
		uniqueIncrementor: (v, inc) => parseInt(v) + inc,
		uniqueToken: '!!!UNIQUE!!!',
		existing: undefined,
		shouldAllocate: true,
		shouldAllocateInit: (doc, settings) => typeof doc[settings.field] == 'string' && doc[settings.field],
		...options,
	};

	// Sanity checks {{{
	if (!settings.template) throw new Error('Template must be specified');
	// }}}

	var middlewareHook = function(done, doc, newDoc) {
		var operation = this.operation; // Fetch operation from `this` on bind (used to fork depending on op)

		var handlebarsCandidate;
		var tryUniqueValue;
		var template;
		var templateData;

		if (newDoc) Object.assign(doc, newDoc); // Copy any data from post hooks
		// FIXME: We end up back here during the `mongoosy.save()` need to be sure we don't assign twice.
		if (settings.shouldAllocateInit(doc, settings)) return done(); // Field already allocated

		Promise.resolve()
			// Fetch document and add 'code' if missing {{{
			.then(()=> new Promise((resolve, reject) => {
				if (doc.hasOwnProperty(settings.field) && (doc[settings.field] === null || doc[settings.field] === '(Code assigned on save)')) {
					app.log('Code field exists and is not allocated', app.log.colors.cyan(model.$collection), '#', app.log.colors.cyan(doc._id), settings.field, '=', app.log.colors.cyan('null'));
					return resolve(); // Key allocated but is null
				}
				if (doc.hasOwnProperty(settings.field) && doc[settings.field] === undefined) {
					if (settings.allocateUndefined) {
						return resolve();
					} else {
						app.log('Code field exists but undefined during create', app.log.colors.cyan(model.$collection), '#', app.log.colors.cyan(doc._id), settings.field, '=', app.log.colors.cyan('undefined'));
						return reject('SKIP');
					}
				}
				if (!doc._id) {
					app.log('Unable to fetch code for partial document', app.log.colors.cyan(model.$collection), '#', '_id', '=', app.log.colors.cyan('undefined'));
					return reject('SKIP');
				}

				// The incomming document is missing the field we need to check - go fetch it
				model
					.findOne({
						_id: doc._id,
						//$errNotFound: false
					})
					.select(settings.field)
					.exec((err, found) => {
						if (err) {
							app.log.warn('Failed to fetch code for partial document', app.log.colors.cyan(model.$collection), '#', app.log.colors.cyan(doc._id), settings.field, 'threw error', app.log.colors.cyan(err));
							return reject('SKIP');
						} else if (!found) {
							app.log.warn('Failed to fetch partial document', app.log.colors.cyan(model.$collection), '#', app.log.colors.cyan(doc._id), 'database cannot find document');
							return reject('SKIP');
						} else if (
							found[settings.field] === undefined && settings.allocateUndefineda // Undefined and we need to allocate OR
							|| !found[settings.field] // No value anyway
						) {
							app.log('Fetched code for partial document', app.log.colors.cyan(model.$collection), '#', app.log.colors.cyan(doc._id), settings.field, '=', app.log.colors.cyan(found[settings.field]));
							doc[settings.field] = found[settings.field]; // Glue fetched field to document
							if (_.isString(doc[settings.field]) && doc[settings.field]) return reject('SKIP');
							return resolve();
						} else { // Already has a code
							return reject('SKIP');
						}
					});
			}))
			// }}}
			// Process settings.shouldAllocate {{{
			.then(()=> _.isFunction(settings.shouldAllocate)
				? Promise.resolve(settings.shouldAllocate(doc, settings))
				: settings.shouldAllocate
			)
			.then(willAlloc => {
				if (!willAlloc) throw 'SKIP';
			})
			// }}}
			// Resolve templateData into an object {{{
			.then(()=> _.isFunction(settings.templateData)
				? Promise.resolve(settings.templateData(doc))
				: settings.templateData,
			)
			.then(res => templateData = res)
			// }}}
			// Resolve template into a string {{{
			.then(()=> _.isFunction(settings.template)
				? Promise.resolve(settings.template(doc))
				: settings.template,
			)
			.then(res => template = res)
			.then(()=> {
				if (!_.isString(template)) throw new Error('Code allocation template must resolve to a string');
			})
			// }}}
			// Setup handlebars helpers {{{
			.then(()=> {
				handlebars.registerHelper('pad', function(data, len, char) {
					return _.padStart(data, _.isNumber(len) ? len : 4, _.isString(char) ? char : '0');
				});

				handlebars.registerHelper('unique', function() { // Processed in post
					return '!!!UNIQUE!!!';
				});
			})
			// }}}
			// Create the handlebarsCandidate templator {{{
			.then(()=> handlebarsCandidate = handlebars.compile(template)(templateData))
			// }}}
			.then(()=> {
				return new Promise((resolve, reject) => {
					var tryAlloc = (biasOffset) => {
						var tryCode;

						// Calculate the next unique token to use
						Promise.resolve()
							.then(()=> new Promise((resolveInner, rejectInner) => {
								if (handlebarsCandidate.indexOf(settings.uniqueToken) === false) return resolveInner(); // Don't need to - its not used

								if (settings.existing) { // Check that the string portion of the candidate matches the existing pattern - if it does we can safely reject the check for collisions as the item code wont have changed
									var candidatePrototype = new RegExp('^' + handlebarsCandidate.replace(settings.uniqueToken, settings.uniqueRE) + '$');
									if (candidatePrototype.test(settings.existing)) {
										var candidatePrototypeBits = candidatePrototype.exec(settings.existing); // Extract the unique value from the existing string and provide it upstream
										return resolveInner(candidatePrototypeBits[1]);
									}
								}

								// Compile candidateCode into a regExp and look for collisions
								var codeRE = new RegExp('^' + handlebarsCandidate.replace(settings.uniqueToken, settings.uniqueRE) + '$');
								var query = {
									$errNotFound: false,
									[settings.field]: codeRE,
								};

								model
									.findOne(query)
									.select(['_id', settings.field])
									.sort('-_id')
									.limit(1)
									.exec((err, lastMatch) => {
										if (err) {
											// FIXME: Not caught, reject the outside promise instead?
											return rejectInner(err);
										} else if (!lastMatch || (lastMatch && lastMatch[settings.field] === null)) { // No records found - presumably the first to use a unique value
											return resolveInner(parseInt(settings.uniqueStart) + biasOffset);
										} else {
											var foundCode = codeRE.exec(lastMatch[settings.field]);
											var newUnique = settings.uniqueIncrementor(foundCode[1], settings.uniqueIncrement + biasOffset);
											app.log('Using starting unique value', app.log.colors.cyan(foundCode[1]), 'for', app.log.colors.cyan(model.$collection), '#', app.log.colors.cyan(doc._id), '- incrementing to', app.log.colors.cyan(newUnique));
											return resolveInner(newUnique);
										}
									});
							}))
							.then(nextUnique => {
								tryCode = nextUnique
									? handlebarsCandidate.replace(settings.uniqueToken, _.padStart(nextUnique, settings.uniquePadding, settings.uniquePaddingChar))
									: handlebarsCandidate
							})
							.then(()=> app.lock.create({
								collection: model.$collection,
								field: settings.field,
								code: tryCode,
							}))
							.then(lockAllocated => {
								if (lockAllocated && operation == 'create') { // Record not created yet - just glue to document
									app.log(app.log.colors.green('Allocated'), 'Use code', app.log.colors.cyan(tryCode), 'for', app.log.colors.cyan(model.$collection), '#',  app.log.colors.cyan(doc._id));
									doc[settings.field] = tryCode;
									resolve();
								} else if (lockAllocated) {
									app.log(app.log.colors.green('Saving'), 'Allocating code', app.log.colors.cyan(tryCode), 'to', app.log.colors.cyan(model.$collection), '#',  app.log.colors.cyan(doc._id));
									mongoosy.save({
										$collection: model.$collection,
										$id: doc._id,
										$refetch: false,
										$data: {user: null},
										[settings.field]: tryCode,
									}, err => {
										if (err) {
											app.log.warn('Allocating code', app.log.colors.red('FAILED'), app.log.colors.cyan(tryCode), 'to', app.log.colors.cyan(model.$collection), '#',  app.log.colors.cyan(doc._id));
											return reject(err);
										}
										app.log(app.log.colors.green('Success'), 'Allocated code', app.log.colors.cyan(tryCode), 'to', app.log.colors.cyan(model.$collection), '#',  app.log.colors.cyan(doc._id));
										return resolve();
									});
								} else {
									var newBias = biasOffset + settings.uniqueIncrement;
									app.log.warn('Code', app.log.colors.cyan(tryCode), 'for', app.log.colors.cyan(model.$collection), '#',  app.log.colors.cyan(doc._id), 'is locked - retrying with new increment bias', newBias);
									setTimeout(()=> tryAlloc(newBias), 100); // Increment and try again in 100ms
								}
							})
					};

					// Attempt initial allocation
					tryAlloc(0);
				});
			})
			.then(()=> done())
			.catch(e => e === 'SKIP' ? done() : done(e))
	};

	if (settings.allocateCreate) model.hook('create', middlewareHook.bind({operation: 'create'}));
	if (settings.allocateSave) model.hook('save', middlewareHook.bind({operation: 'save'}));
	if (settings.allocateSave) model.hook('update', middlewareHook.bind({operation: 'update'}));
};
</server>
