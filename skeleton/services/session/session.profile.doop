<script lang="js" backend endpoint>
var _ = require('lodash');
var crypto = require('crypto');

/**
* Provide some selected fields from the users profile (if any) or just an empty response if there is no user
* @returns {undefined|Object} Undefined if the user is not logged in, an Object with selected fields otherwise
*/
app.get('/api/session', (req, res) => {
	if (!req.user) return res.sendStatus(200);

	res.send({
		_id: req.user._id,
		email: req.user.email,
		name: req.user.name,
		username: req.user.username,
		settings: req.user.settings || {},
		permissions: {
			...req.user.permissions,
			...(app.config.isProduction ? undefined : app.config.session.profile.forcePermissions),
		},
	});
});
</script>


<script lang="js" backend endpoint>
var _ = require('lodash');

/**
* Save (limited) user data back to the current users document
* @param {Object} [req.body.settings] The user settings to save (treated as an assignment)
*/
app.post('/api/session', (req, res) => {
	if (!req.user) return res.sendStatus(403);

	Object.assign(req.user, _.pick(req.body, ['name', 'settings']));

	req.user.save()
		.then(()=> res.sendStatus(200));
});
</script>


<script lang="js" backend endpoint>
var glob = require('globby');

/**
* Return IF the user avatar exists. See GET /api/session/avatar to actually fetch it
*/
app.head('/api/session/avatar', app.middleware.express.isUser(), (req, res) => {
	glob(`./users/${req.user._id}/avatar.png`, {cwd: app.config.paths.data})
		.then(avatarPaths => avatarPaths.length > 0 ? avatarPaths[0] : Promise.reject('404: User avatar not found'))
		.then(avatar => res.send('OK'))
		.catch(res.sendError)
});
</script>


<script lang="js" backend endpoint>
var glob = require('globby');

/**
* Return the users avatar if there is one, otherwise throw 404
*/
app.get('/api/session/avatar', app.middleware.express.isUser(), (req, res) => {
	glob(`./users/${req.user._id}/avatar.png`, {cwd: app.config.paths.data})
		.then(avatarPaths => avatarPaths.length > 0 ? avatarPaths[0] : Promise.reject('404: User avatar not found'))
		.then(avatarPath => res.sendFile(avatarPath, {root: app.config.paths.data}))
		.catch(res.sendError)
});
</script>


<script lang="js" backend endpoint>
var _ = require('lodash');
var fs = require('fs');

/**
* Override user avatar by uploading an image file
*/
app.post(
	'/api/session/avatar',
	app.middleware.express.isUser(),
	app.middleware.express.uploads.single('file'),
	(req, res) => {
		if (!req.file) return res.sendError('No file provided');

		fs.promises.mkdir(`${app.config.paths.data}/users/${req.user._id}`, {recursive: true})
			.then(()=> fs.promises.move(req.file.path, `${app.config.paths.data}/users/${req.user._id}/avatar.png`))
			.then(()=> res.send('OK'))
	},
);
</script>
