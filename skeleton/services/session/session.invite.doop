<script lang="js" backend endpoint>
/**
* Accept an email invite via token
* @param {string} req.params.token The token used to login the user
*/
// TODO: Rate limit. Throttle middleware?
app.get('/go/invite/:token', (req, res) => {
	app.db.users.findOne({
		status: { $ne: 'deleted' },
		_token: req.params.token,
		_tokenPurpose: 'invite', // Restrict the token usage to users requesting logins only
		/*
		// TODO: Fully integrate tokenExpiry
		_tokenExpiry: {
			$or: [
				$exists: false,
				$gte: moment().utc().toDate(),
			]
		},
		*/
	})
		.then(user => user || Promise.reject('Password reset token invalid'))
		.then(user => {
			if (!app.config.session.invite.enabled) throw new Error('501: Feature is disabled');
			// TODO: Validate any user conditions
			return user;
		})
		.then(user => user.logIn(res).then(()=> user))
		.then(user => user.releaseToken().then(()=> user))
		.then(user => {
			user.status = 'active';
			return user.save();
		})
		// Utilising forgot password functionality to prompt user.
		.then(()=> res.redirect('/reset'))
		.catch(() => res.redirect('/?failure'));
});
</script>


<script lang="js" backend endpoint>
var _ = require('lodash');
var email = require('@momsfriendlydevco/email');
var fs = require('fs');
// TODO: Fully integrate tokenExpiry
//var moment = require('moment');

/**
* Create a basic user record and dispatch an email invite
* @param {string} req.body.email The user email
* @param {string} [req.body.name] The users name
* @param {Object} [req.body.permissions] Optional permissions to set for the user against the project, only available if the current user has usersPromote
* @returns {Object} The newly created user object consisting of `{_id}`
*/
app.post([
	'/api/session/invite',
	...(app.config.session.auth.allowPost ? ['/invite'] : []),
], (req, res) => Promise.resolve()
		// Sanity checks {{{
		.then(()=> {
			if (!app.config.session.invite.enabled) throw new Error('501: Feature is disabled');
			if (!req.body) throw new Error('No login credentials');
			if (app.config.session.signup.emailAsUsername && !req.body.email) throw new Error('400: No email address provided');
			req.body.email = req.body.email.toLowerCase();
			// TODO: Check valid email
			if (app.config.session.signup.emailAsUsername) req.body.username = req.body.email;
			if (!app.config.session.signup.emailAsUsername && !req.body.username) throw new Error('400: No username provided');
		})
		// }}}
		// Sanity check against the requesting user {{{
		.then(()=> {
			// FIXME: Use hasPermissions
			if (!req.user.permissions.usersInvite) throw new Error('You are not permitted to invite new members');
		})
		// }}}
		// Either find existing user or create stub account {{{
		.then(()=> app.db.users.findOne({
			email: req.body.email,
		}))
		.then(user => {
			if (user) return user; // Found existing user - pass on details

			return app.db.users.create({ // User not found - create a new user with provided details
				email: req.body.email,
				name: req.body.name || req.body.username || req.body.email,
				username: req.body.username,
				// TODO: Configurable list of project specific fields
			});
		})
		// }}}
		// Generate invite token {{{
		.then(user => user.setToken('invite').then(token => [user, token]))
		// }}}
		// Fetch email attachments {{{
		.then(([user, token])=>
			Promise.all([
				fs.promises
					.readFile(`${app.config.paths.root}/assets/logo/logo.png`)
					.then(file => ({
						filename: 'logo.png',
						cid: 'logo.png',
						content: file.toString('base64'),
						contentType: 'image/png',
						encoding: 'base64',
					})),
			]).then(attachments => [user, token, attachments])
		)
		// }}}
		// Dispatch email {{{
		.then(([user, token, attachments]) => {
			app.log('Email', user.email, `/go/invite/${token}`);
			//app.log('Attachments', attachments);
			if (!app.config.email.enabled) return user;

			email().send({
				to: user.email,
				subject: `You have been invited to ${app.config.title}`,
				attachments: attachments,
				template: `${app.config.paths.root}/services/session/session.invite.email.html`,
				templateParams: {
					user: _.pick(user.toObject(), [
						'_id',
						'username',
						'name',
						'email',
						'permissions',
						'lastLogin',
						'status',
						'settings',
						'apiKeys',
					]),
					config: _.pick(app.config, [
						'name',
						'title',
						'email',
						'session',
					]),
					// TODO: Fully integrate tokenExpiry
					//tokenExpiry: moment().utc(user._tokenExpiry).local().format('MMMM DD, YYYY'),
					ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
					url: `${app.config.publicUrl}/go/invite/${token}`,
					path: `${app.config.paths.root}`,
				},
			});
			return user;
		})
		// }}}
		// End {{{
		.then(user => res.format({
			html: ()=> res.redirect('/'),
			json: ()=> res.status(200).send({_id: user._id}),
			default: ()=> res.status(406).send('Not an acceptable login accept type'),
		}))
		.catch(res.sendError)
		// }}}
);
</script>

