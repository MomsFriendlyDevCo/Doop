<server on="preEndpoints">
// Inject cookie handling middleware
var cookieParser = require('cookie-parser');
app.use(cookieParser({
	secret: app.config.secret,
}));


/**
* Inject MemcacheD + Dynamo session storage
*
* Process:
*          1. Check if the input has a cookie header - if not, pass to next()
*          2. Use cookie to lookup user._id from cache
*          3. Lookup full user object from Dynamo via user._id
*/
app.use((req, res, next) => {
	var lookupToken;
	if (app.config.session.cookie.enabled && req.cookies && req.cookies[app.config.session.cookie.name]) { // Cookie mode
		lookupToken = req.cookies[app.config.session.cookie.name];
	} else if (app.config.session.authHeader.enabled && req.headers.auth) { // 'Auth' header token method
		lookupToken = req.headers.auth;
	} else { // Either no method is enabled or no token / cookie has been provided
		return next();
	}

	app.cache.get(app.config.session.cache.prefix + lookupToken) // Fetch cache entry for this (auth header | cookie) -> user._id lookup
		.then(session => session._id ? session : Promise.reject('Invalid session state'))
		.then(session => app.db.users.findOneByID(session._id))
		.then(user => user || Promise.reject('Invalid user ID'))
		.then(user => req.user = user)
		.then(()=> next()) // Defer to remaining Express middleware
		.catch(()=> next()) // Ignore cache faults - probably expired user session or other cache fault


	// Glue meta req.logIn method to req {{{
	/**
	* Login the current user session as the given user document
	* This function assumes username + password || token validation has already taken place
	* @param {Object} user The user document to log the current session in as
	* @returns {Promise<Object>} A promise which will resolve when the user login has completed the result of this Promise should be sent to req.send()
	*
	* @example Find and login a user by a document
	* db.users.findOne({username: 'admin')
	*   .then(user => req.logIn(user))
	*   .then(body => res.send(body))
	*/
	req.logIn = user => Promise.resolve()
		// Generate UUID {{{
		.then(()=> app.utils.uuid.generate().then(token => token))
		// }}}
		// Create cookie against user login {{{
		.then(token => {
			var output;
			app.log('Successful login for', user.username || user.email);

			if (app.config.session.cookie.enabled) res.cookie(app.config.session.cookie.name, token, app.config.session.cookie);
			if (app.config.session.authHeader.enabled) output = {auth: token}; // Send cookie as JSON return rather than though the traditional method (used to provide cross-domain access when testing a Cordova sandbox)

			return app.cache.set(app.config.session.cache.prefix + token, {_id: user._id}).then(()=> output);
		})
		// }}}
	// }}}
});
</server>
