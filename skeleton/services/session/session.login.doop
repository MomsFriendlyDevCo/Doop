<endpoint>
var promisify = require('util').promisify;
/**
* Accept a user token to perform an immediate login
* @param {string} req.params.token The token used to login the user
*/
// TODO: Could be more universal if `/go/:type/:token` was able to lookup a redirect URL also.
app.get('/go/login/:token', (req, res) => {
	app.db.users.findOne({
		_token: req.params.token,
		_tokenPurpose: 'login', // Restrict the token usage to users requesting logins only
		//$errNotFound: false,
	})
		.then(user => user || Promise.reject('Login token invalid'))
		.then(user => user.logIn(res).then(()=> user))
		.then(user => user.releaseToken())
		.then(()=> res.redirect('/'))
		.catch(e => res.sendError(403, e.toString()))
});
</endpoint>

<server on="postEndpoints">
var _ = require('lodash');

app.post([
	'/api/session/login',
	...(app.config.session.auth.allowPost ? ['/login'] : []),
], (req, res) => Promise.resolve()
		// Sanity checks {{{
		.then(()=> {
			if (!req.body) throw new Error('No login credentials');
			if (app.config.session.signup.emailAsUsername) req.body.username = req.body.email;
			if (!req.body.username) throw new Error('400: No username provided');
			if (!req.body.password) throw new Error('400: No password provided');
		})
		// }}}
		// Fetch user and verify password {{{
		.then(()=> app.log('Check login for', req.body.username))
		.then(()=> app.db.users.findOne({
			//$errNotFound: false,
			$or: [
				{email: req.body.username},
				{username: req.body.username},
			],
		}))
		// FIXME: User enumeration
		.then(user => user || Promise.reject('403: Unknown user'))
		.then(user => user.checkPassword(req.body.password)
			.then(res => !res && Promise.reject('403: Invalid password'))
			.then(()=> user)
		)
		// }}}
		// Generate UUID {{{
		.then(user => app.utils.uuid.generate().then(token => [user, token]))
		// }}}
		// Create cookie against user login {{{
		.then(data => {
			var [user, token] = data;

			var output;
			app.log('Successful login for', app.log.colors.cyan(user.username || user.email));

			if (app.config.session.cookie.enabled) res.cookie(app.config.session.cookie.name, token, app.config.session.cookie);
			if (app.config.session.authHeader.enabled) output = {auth: token}; // Send cookie as JSON return rather than though the traditional method (used to provide cross-domain access when testing a Cordova sandbox)

			return app.cache.set(app.config.session.cache.prefix + token, {_id: user._id}).then(()=> output);
		})
		// }}}
		// End {{{
		.then(output => res.format({
			html: ()=> res.redirect('/'),
			json: ()=> res.status(200).send(output),
			default: ()=> res.status(406).send('Not an acceptable login accept type'),
		}))
		.catch(res.sendError)
		// }}}
);
</server>
