<endpoint>
var promisify = require('util').promisify;
/**
* Accept a user token to perform an immediate login
* @param {string} req.params.token The token used to login the user
*/
app.get('/go/login/:token', (req, res) => {
	db.users.findOne({
		_token: req.params.token,
		_tokenPurpose: 'login', // Restrict the token usage to users requesting logins only
	})
		.then(user => new Promise((resolve, reject) => req.logIn(user, err => {
			if (err) return reject(err);
			resolve();
		})))
		.then(()=> req.user.releaseToken())
		.then(()=> res.redirect('/'))
		.catch(()=> res.sendError(403, 'Login token invalid'))
});
</endpoint>

<server on="postEndpoints">
var _ = require('lodash');

app.post('/api/session/login', (req, res) => {
	Promise.resolve()
		// Sanity checks {{{
		.then(()=> {
			if (!req.body) throw new Error('No login credentials');
			if (!req.body.email) throw new Error('400: No email address provided');
			if (!req.body.password) throw new Error('400: No password provided');
		})
		// }}}
		// Fetch user and verify password {{{
		.then(()=> app.log('Check login for', req.body.email))
		.then(()=> app.db.users.findOne({$errNotFound: false, $or: [{username: req.body.email}, {email: req.body.email}]}))
		.then(user => {
			if (!user) throw new Error('403: Unknown email address');
			return user;
		})
		.then(user => user.checkPassword(req.body.password)
			.then(res => !res && Promise.reject('403: Invalid password'))
			.then(()=> user)
		)
		// }}}
		// Generate UUID {{{
		.then(user => app.utils.uuid.generate().then(token => [user, token]))
		// }}}
		// Create cookie against user login {{{
		.then(data => {
			var [user, token] = data;

			var output;
			app.log('Successful login for', user.username || user.email);

			if (app.config.session.cookie.enabled) res.cookie(app.config.session.cookie.name, token, app.config.session.cookie);
			if (app.config.session.authHeader.enabled) output = {auth: token}; // Send cookie as JSON return rather than though the traditional method (used to provide cross-domain access when testing a Cordova sandbox)

			return app.cache.set(app.config.session.cache.prefix + token, {_id: user._id}).then(()=> output);
		})
		// }}}
		// End {{{
		.then(output => res.status(200).send(output))
		.catch(res.sendError)
		// }}}
});
</server>
