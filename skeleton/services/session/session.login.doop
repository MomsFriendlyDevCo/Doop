<endpoint>
var promisify = require('util').promisify;
/**
* Accept a user token to perform an immediate login
* @param {string} req.params.token The token used to login the user
*/
app.get('/go/login/:token', (req, res) => {
	db.users.findOne({
		_token: req.params.token,
		_tokenPurpose: 'login', // Restrict the token usage to users requesting logins only
		$errNotFound: false,
	})
		.then(user => user || Promise.reject('Login token invalid'))
		.then(user => user.logIn(res).then(()=> user))
		.then(user => user.releaseToken())
		.then(()=> res.redirect('/'))
		.catch(e => res.sendError(403, e.toString()))
});
</endpoint>

<server on="postEndpoints">
var _ = require('lodash');

app.post('/api/session/login', (req, res) => {
	Promise.resolve()
		// Sanity checks {{{
		.then(()=> {
			if (!req.body) throw new Error('No login credentials');
			if (!req.body.email) throw new Error('400: No email address provided');
			if (!req.body.password) throw new Error('400: No password provided');
		})
		// }}}
		// Fetch user and verify password {{{
		.then(()=> app.log('Check login for', req.body.email))
		.then(()=> app.db.users.findOne({$errNotFound: false, $or: [{username: req.body.email}, {email: req.body.email}]}))
		.then(user => user || Promise.reject('403: Unknown email address'))
		.then(user => user.checkPassword(req.body.password)
			.then(res => !res && Promise.reject('403: Invalid password'))
			.then(()=> user)
		)
		// }}}
		// Perform login {{{
		.then(user => user.logIn(res))
		// }}}
		// End {{{
		.then(output => res.status(200).send(output))
		.catch(res.sendError)
		// }}}
});
</server>
