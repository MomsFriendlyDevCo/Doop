<script lang="js" backend endpoint>
var moment = require('moment');

/**
* Accept a user token to confirm email address
* @param {string} req.params.token The token used to login the user
*/
// TODO: Rate limit. Throttle middleware?
app.get('/go/signup/:token', (req, res) => {
	app.db.users.findOne({
		//$errNotFound: false, // Monoxide
		status: { $ne: 'deleted' },
		_token: req.params.token,
		_tokenPurpose: 'signup',
		/*
		// TODO: Fully integrate tokenExpiry
		_tokenExpiry: {
			$or: [
				$exists: false,
				$gte: moment().utc().toDate(),
			]
		},
		*/
	})
		.then(user => user || Promise.reject('Signup token invalid'))
		// TODO: tokenExpiry here?
		//.then(user => moment().utc(user._tokenExpiry).isBefore(moment().utc()) ? Promise.reject('Signup Token Invalid') : user)
		.then(user => {
			if (!app.config.session.signup.enabled) throw new Error('501: Feature is disabled');
			// TODO: Validate any user conditions
			return user;
		})
		.then(user => user.logIn(res).then(()=> user))
		.then(user => user.releaseToken().then(()=> user))
		.then(user => {
			user.status = 'active';
			return user.save();
		})
		// Utilising forgot password functionality to prompt user.
		.then(()=> {
			if (app.config.session.signup?.redirect) {
				app.log('Signup complete redirect', app.config.session.signup.redirect);
				res.redirect(app.config.session.signup.redirect);
			} else if (app.config.session.signup?.passwordInitial) {
				app.log('Signup complete welcome', '/welcome');
				res.redirect('/welcome');
			} else {
				if (app.config.session.signup?.externalPasswordReset) {
					app.log('Signup complete set password', `/recover/${req.params.token}`);
					res.redirect(`/recover/${req.params.token}`);
				} else {
					app.log('Signup complete set password', '/reset');
					res.redirect('/reset');
				}
			}
		})
		.catch(() => res.redirect('/signup?failure'));
});
</script>

<script lang="js" backend endpoint>
/**
* Create new user with optional data
* @param {string} req.body.email The email address to create the account for
* @param {string} [req.body.username] The username associated with the account, defaults to email if unspecified
* @param {string} [req.body.name] Name to create the account with, defaults to username if unspecified
* @param {string} [req.body.password] Optonal password to create account with
* @param {boolean} [req.body.sendEmail=true] Whether to dispatch a welcome email along with a generated signup token
*/
var _ = require('lodash');
var email = require('@momsfriendlydevco/email');
var fs = require('fs');
var settings = {
	redirect: false,
};

app.post([
	'/api/session/signup',
	...(app.config.session.auth.allowPost ? ['/signup'] : []),
], (req, res) => Promise.resolve()
		// Sanity checks {{{
		.then(()=> {
			if (!app.config.session.signup.enabled) throw new Error('501: Feature is disabled');
			if (!req.body) throw new Error('No login credentials');
			if (app.config.session.signup.emailAsUsername && !req.body.email) throw new Error('400: No email address provided');
			req.body.email = req.body.email.toLowerCase();
			// TODO: Check valid email
			if (app.config.session.signup.emailAsUsername) req.body.username = req.body.email;
			if (!app.config.session.signup.emailAsUsername && !req.body.username) throw new Error('400: No username provided');
		})
		// }}}
		// Validate and create user {{{
		.then(()=> app.log('Check login for', req.body.username))

		// TODO: When permitted email domain list is defined ensure users domain matches

		.then(()=> app.db.users.findOne({
			username: req.body.username,
		}))
		.then(user => {
			switch (user?.status) {
				// User exists and has already verified email or has subsequently been deleted
				case 'active':
				case 'deleted':
					// FIXME: User enumeration
					return Promise.reject('400: User already exists');
				// Signup already pending, resend verification email
				case 'inactive':
					return user;
			}

			// Create new user
			return app.db.users.create({
				email: req.body.email,
				name: req.body.name || req.body.username || req.body.email,
				username: req.body.username,
				...(req.body.password
					? {password: req.body.password}
					: {}
				),
				// TODO: Potential for a `permissionGroups: ['User']` virtual.
				// TODO: Configurable list of project specific permissions
				permissions: {
					//riversCreate: true,
					//riversRead: true,
					//riversUpdate: true,
					//riversDelete: true,
				},
			});
		})
		// }}}
		// Generate Token {{{
		.then(user => user.setToken('signup').then(token => [user, token]))
		// }}}
		// Fetch email attachments {{{
		.then(([user, token])=>
			Promise.all([
				fs.promises
					.readFile(`${app.config.paths.root}/assets/logo/logo.png`)
					.then(file => ({
						filename: 'logo.png',
						cid: 'logo.png',
						content: file.toString('base64'),
						contentType: 'image/png',
						encoding: 'base64',
					})),
			]).then(attachments => [user, token, attachments])
		)
		// }}}
		// Dispatch email {{{
		.then(([user, token, attachments]) => {
			app.log('Email', user.email, `/go/signup/${token}`);
			//app.log('Attachments', attachments);
			if (!app.config.email.enabled) return user;
			if (!(app.config.session.signup.verifyEmail ?? true)) return user;

			// FIXME: Not waiting for promise
			email().send({
				to: user.email,
				subject: `Welcome to ${app.config.title}`,
				attachments: attachments,
				template: `${app.config.paths.root}/services/session/session.signup.email.html`,
				templateParams: {
					user: _.pick(user.toObject(), [
						'_id',
						'username',
						'name',
						'email',
						'permissions',
						'lastLogin',
						'status',
						'settings',
						'apiKeys',
					]),
					config: _.pick(app.config, [
						'name',
						'title',
						'email',
						'session',
					]),
					// TODO: Fully integrate tokenExpiry
					//tokenExpiry: moment().utc(user._tokenExpiry).local().format('MMMM DD, YYYY'),
					ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress,
					url: `${app.config.publicUrl}/go/signup/${token}`,
					path: `${app.config.paths.root}`,
				},
			});
			return user;
		})
		// }}}
		// End {{{
		.then(user => res.format({
		// TODO: When html?
		//	html: ()=> req.body.redirect ? res.redirect('/') : res.status(406).send('Email already in use'),
			json: ()=> res.status(200).send({_id: user._id}),
			default: ()=> res.status(406).send('Not an acceptable login accept type'),
		}))
		// FIXME: Hide nature of error.
		.catch(res.sendError)
		// }}}
);
</script>

<script lang="js" backend endpoint>
// FIXME: User enumeration, throttle
app.get('/api/checkemail', (req, res) => {
	if(!req.query.email) return res.send({validates: false});
	return app.db.users.find({email: req.query.email})
		.then(user => user?.length > 0 ? res.send({validates: false}) : res.send({validates: true})
		// req.query.email.match(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/) ? res.send({invalidEmail: true}) : res.send({invalidEmail: false})
		)
		.catch(err => {
			app.log(err)
			res.send({validate: false})
		})
})
</script>
