<script lang="js" backend on="init, dbInit">
var _ = require('lodash');
var sift = require('sift');

/**
* User permissions handling
* NOTE: This is a backend mirror of the $session.permissions library and should be kept up to date
* @var {Object}
*/
app.utils.permissions = {};

/**
* Query whether a user has a given or array of permissions
* @param {string|array<string>|object} permission Single or multiple permissions to check, if an array all must be present
* @param {Object} [from=app.utils.permissions] Where to look for permissions
* @returns {boolean} A boolean if the permission statement matches
* @see $session.hasPermission.any()
*/
app.utils.permissions.has = (permission, from = app.utils.permissions) => {
	var expression = permission;

	// Convert string to single clause
	if (_.isString(expression)) expression = {[expression]: true};
	// Convert array to multiple clauses
	if (_.isArray(expression)) expression = { $and: expression.map(value => ({[value]: true})) };

	return ([from].filter(sift(expression)).length > 0);
};

/**
* Similar to $session.hasPermission but applies an "OR" condition to arrays
* @param {string|array<string>|object} permission Single or multiple permissions to check, if an array any item must be present
* @param {Object} [from=app.utils.permissions] Where to look for permissions
* @returns {boolean} A boolean if the permission statement matches
* @see app.utils.permissions.has()
*/
app.utils.permissions.has.any = (permission, from = app.utils.permissions) => {
	var expression = permission;

	// Convert array to multiple clauses
	if (_.isArray(expression)) expression = { $or: expression.map(value => ({[value]: true})) };

	return app.utils.permissions.has(expression, from);
};
</script>
