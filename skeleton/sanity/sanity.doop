<endpoint>
var _ = require('lodash');
var basicAuth = require('express-basic-auth');
var fspath = require('path');
var glob = require('globby');

/**
* Compute an array of sanity checks to run from all fiels in /sanity/*.js
* @type {array}
*/
var sanityChecks = glob.sync(`${app.config.paths.root}/sanity/*.js`)
	.map(path => {
		var id = fspath.basename(path, '.js');
		var func = require(path);
		if (typeof func != 'function') throw new Error(`Recieved non-function return in "${path}" - expected a function or promise factory`);

		return {id, func};
	})
	.sort((a, b) => a.id > b.id ? 1 : -1)

app.log('Loaded', app.log.colors.cyan(sanityChecks.length), 'sanity checks:', sanityChecks.map(s => s.id).map(i => app.log.colors.cyan(i)).join(', '));


/**
* Endpoint for basic server santity checks
* This endpoint runs all /sanity/*.js scripts scripts (resolving promises) and only returns `"SANITY:OK"` if everything passes, otherwise errors are shown
* Workers can throw - in which case sanity fails or return a string (shows as the passing text string)
*/
app.get(
	'/api/sanity',
	basicAuth({
		challenge: true,
		realm: app.config.title,
		users: {[app.config.sanity.user]: app.config.sanity.pass},
	}),
	(req, res) => {
		res.type('text');

		Promise.all(sanityChecks.map(s =>
			Promise.resolve(s.func())
				.then(m => `PASS ${s.id} - ${m || 'OK'}`)
				.catch(e => `FAIL ${s.id} - ${e.toString()}`)
		))
			.then(results => {
				var fail = results.some(r => typeof r == 'string' && r.startsWith('FAIL '));

				if (fail) res.status(500);

				res.send(
					(fail ? 'SANITY:FAIL\n' : 'SANITY:OK\n')
					+ results.join('\n')
				);
			})
			.catch(e => res.send(`SANITY:FAULT:${e.toString()}`)) // Generic fallback
	}
);
</endpoint>
