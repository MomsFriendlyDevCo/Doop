<schema>
/**
* Generic logging sub-system
* Each log is a HTML payload (stored as 'body') attached to col(lection) / doc
*
* Body elements should wrap simple classes in span elements
* Inserts: {body: 'Order created'}
* Changes: {body: 'Status changed<span class="from">Foo</span><span class="to">Bar</span>'
*/
app.middleware.db.schema('logs', {
	created: {type: Date, default: Date.now, index: true},
	creator: {type: 'pointer', ref: 'users', index: true},
	col: {type: 'string'},
	doc: {type: 'pointer', ref: 'users'},
	body: {type: 'string'},
})
	.index(['col', 'doc'])
</schema>


<endpoint>
/**
* Push a log item by collection + id
* @param {string} req.params.col The collection to append to
* @param {string} req.params.doc The document ID to append to
* @param {string} req.body.creator Creator ID for the log entry
* @param {string} req.body.body Body HTML to append
* @returns 200 Simple status code return if successful
*/
app.post('/api/logs/:col/:doc', app.middleware.express.isUser(), (req, res) => {
	Promise.resolve()
		// Sanity checks {{{
		.then(()=> {
			if (!db[req.params.col]) throw ('400: Unknown collection');
			if (!req.body.creator) throw ('400: "creator" post filed must be specified');
			if (!req.body.body) throw ('400: No "body" payload specified');
		})
		// }}}
		.then(()=> db.logs.create({
			creator: req.body.creator,
			col: req.params.col,
			doc: req.params.doc,
			body: req.body.body,
		}))
		.then(()=> res.sendStatus(200))
		.catch(e => res.sendError(e))
});
</endpoint>


<endpoint>
app.use('/api/logs/:id?', app.middleware.express.rest('logs', {
	data: req => req.user ? {user: req.user._id} : undefined,
	get: app.middleware.express.isUser(),
	query: app.middleware.express.isUser(),
	count: app.middleware.express.isUser(),
	create: app.middleware.express.isUser(),
	save: false, // Logs are immutable
	meta: true,
	delete: false, // Logs are immutable
}));
</endpoint>
