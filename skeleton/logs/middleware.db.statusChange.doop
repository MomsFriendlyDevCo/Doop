<server on="middleware, dbMiddleware">
/**
* Middleware to add a log entry whenever a nominated field changes (defaults to the generic "status" field
*
* @param {MonoxideModel} model The model to react to
* @param {Object} [options] Options for the middleware to use
* @param {string} [options.field="status"] Field to react to
* @param {function} [options.onChange] Function to run when a change is detected. Called as `(newDoc, oldDoc)` and can return a promise. Defaults to adding an entry to the `db.logs` collection
* @returns {MonoxideModel} The chainable original MonoxideModel object
*
* @example Monitor the status field and make a log entry on change
* app.db.widgets.use(app.middleware.db.statusChange)
*/
app.middleware.db.statusChange = (model, options) => {
	var settings = {
		field: 'status',
		onChange: (newDoc, oldDoc) =>
			db.logs.create({
				created: new Date(),
				col: model.$collection,
				doc: newDoc._id,
				body: `Status changed<span class="from">${oldDoc.status}</span><span class="to">${newDoc.status}</span>`,
			}),
		...options,
	};

	/**
	* Record and react to status changes
	*/
	model.hook('save', function(next, newDoc) {
		if (!newDoc.status) return next(); // No status payload provided anyway

		model.findOneByID(newDoc._id)
			.select(settings.field)
			.then(oldDoc => {
				if (oldDoc[settings.field] == newDoc[settings.field]) return; // No change - do nothing
				return Promise.resolve(settings.onChange(newDoc, oldDoc));
			})
			.then(()=> next())
			.catch(next)
	})

};
</server>
