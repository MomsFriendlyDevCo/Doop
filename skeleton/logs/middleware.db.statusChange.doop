<script lang="js" backend on="middleware, dbMiddleware">
/**
* Middleware to add a log entry whenever a nominated field changes (defaults to the generic "status" field
*
* @param {MongoosySchema} schema Attach to this schema
* @param {Object} [options] Options for the middleware to use
* @param {string} [options.field="status"] Field to react to
* @param {function} [options.onChange] Function to run when a change is detected. Called as `(newDoc, oldDoc)` and can return a promise. Defaults to adding an entry to the `db.logs` collection
* @returns {MonoxideModel} The chainable original MonoxideModel object
*
* @example Monitor the status field and make a log entry on change
* app.db.widgets.use(app.middleware.db.statusChange)
*/
app.middleware.db.statusChange = (schema, options) => {
	var settings = {
		field: 'status',
		onChange: (newDoc, oldDoc) =>
			db.logs.create({
				created: new Date(),
				col: schema.id,
				doc: newDoc._id,
				body: ''
					+ 'Status changed'
					+ `<code>${oldDoc && oldDoc[settings.field]}</code>`
					+ '<i class="fas fa-arrow-alt-right"></i>'
					+ `<code>${newDoc && newDoc[settings.field]}</code>`
			}),
		...options,
	};

	/**
	* Record and react to status changes
	*/
	var hookFactory = function(path) {
		return function(next) {
			if (schema.id === settings.collection) return next();
			//if (!app.db[schema.id]) return next();
			var newDoc = (path && Object.prototype.hasOwnProperty.call(this, path)) ? this[path] : this;

			if (!newDoc.status) return next(); // No status payload provided anyway

			return app.db[schema.id].findById(newDoc._id)
				.select(settings.field)
				.then(oldDoc => {
					if (oldDoc && newDoc && oldDoc[settings.field] === newDoc[settings.field]) return; // No change - do nothing
					return Promise.resolve(settings.onChange(newDoc, oldDoc));
				})
				.then(() => next())
				.catch(next);
		};
	};

	schema.pre(['save', 'update', 'updateOne', 'updateMany'], hookFactory());
	schema.pre('findOneAndUpdate', hookFactory('_update'));
};
</script>
